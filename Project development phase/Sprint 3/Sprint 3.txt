class User(db.Model):
    __tablename__ = 'users'
    user_name = db.Column(db.String, primary_key=True)
    first_name = db.Column(db.String, nullable=False)
    last_name = db.Column(db.String, nullable=False)
    email = db.Column(db.String, nullable=False, unique=True)
    password = db.Column(db.String, nullable=False)
    gender = db.Column(db.String, nullable=False)
    DOB = db.Column(db.DateTime)
    phone = db.Column(db.String)
    area_code = db.Column(db.Integer, db.ForeignKey('areas.code'), nullable=False)
    baskets = db.relationship('Basket', secondary=complaint, lazy=True, backref=db.backref('complainants'))

    def save(self, has_key_by_default=False):
        if self.user_name is None or has_key_by_default:
            db.session.add(self)
        db.session.commit()
        return self

    def format(self):
        return {
            "user_name": self.user_name,
            "first_name": self.first_name,
            "last_name": self.last_name,
            "email": self.email,
            "gender": self.gender,
            "Date_of_birth": self.DOB
        }


class Employee(db.Model):
    __tablename__ = 'employees'
    SSN = db.Column(db.BigInteger, primary_key=True)
    full_name = db.Column(db.String, nullable=False)
    user_name = db.Column(db.String, nullable=False, unique=False)
    password = db.Column(db.String, nullable=False)
    DOB = db.Column(db.DateTime, nullable=False)
    phone = db.Column(db.String)
    vehicle = db.relationship('Vehicle', uselist=False, lazy="select", backref=db.backref('driver'))
    supervise = db.relationship("Employee")
    supervise_SSN = db.Column(db.BigInteger, db.ForeignKey('employees.SSN'), nullable=True)
